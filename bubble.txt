#include <iostream>
#include <stdlib.h>
#include <omp.h>
#include <chrono>
using namespace std;
using namespace std::chrono;

void bubble(int *, int);
void swap(int &, int &);

void bubbleP(int *a, int n)
{
    for (int i = 0; i < n; i++)
    {
        int first = i % 2;

#pragma omp parallel for shared(a, first)
        for (int j = first; j < n - 1; j += 2)
        {
            if (a[j] > a[j + 1])
            {
                swap(a[j], a[j + 1]);
            }
        }
    }
}

void bubbleS(int *b, int n)
{
    for (int i = 0; i < n - 1; i++)
    {

        for (int j = 0; j < n - i- 1; j++)
        {
            if (b[j] > b[j + 1])
            {
                swap(b[j], b[j + 1]);
            }
        }
    }
}

void swap(int &a, int &b)
{

    int test;
    test = a;
    a = b;
    b = test;
}

int main()
{

    int *a, *b, n;
    cout << "\n enter total no of elements=>";
    cin >> n;
    a = new int[n];
    b = new int[n];
    cout << "\n enter elements=>";
    for (int i = 0; i < n; i++)
    {
        cin >> a[i];
    }

    for (int i = 0; i < n; i++)
    {
        b[i]=a[i];
    }



    auto startTime = high_resolution_clock::now();
    bubbleP(a, n);


    auto endTime = high_resolution_clock::now();

    cout << "\n sorted array is=>";
    for (int i = 0; i < n; i++)
    {
        cout << a[i];
    }
    cout << endl;

    auto seqTime = duration_cast<microseconds>(endTime - startTime).count() / 1000000.0;
    cout << "Parallel Bubble Sort Time: " << fixed << seqTime << " seconds" << endl;

    


    auto startTimeBS = high_resolution_clock::now();
    bubbleS(b, n);
    auto endTimeBS = high_resolution_clock::now();

    cout << "\n sorted array is=>";
    for (int i = 0; i < n; i++)
    {
        cout << b[i];
    }
    cout << endl;

    auto seqTimeBS = duration_cast<microseconds>(endTimeBS - startTimeBS).count() / 1000000.0;
    cout << "Sequential Bubble Sort Time: " << fixed << seqTimeBS << " seconds" << endl;

    return 0;
}