#include <iostream>
#include <cstdlib>
#include <ctime>
#include <omp.h>

using namespace std;

// Sequential bubble sort
void sequentialBubbleSort(int arr[], int n) {
    for (int i = 0; i < n - 1; ++i) {
        for (int j = 0; j < n - i - 1; ++j) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

// Parallel bubble sort
void parallelBubbleSort(int arr[], int n) {
    #pragma omp parallel for shared(arr)
    for (int i = 0; i < n - 1; ++i) {
        for (int j = i % 2; j < n - 1; j += 2) {
            if (arr[j] > arr[j + 1]) {
                swap(arr[j], arr[j + 1]);
            }
        }
    }
}

// Function to generate random array
void generateRandomArray(int arr[], int n) {
    srand(time(NULL));
    for (int i = 0; i < n; ++i) {
        arr[i] = rand() % 1000; // Random numbers between 0 and 999
    }
}

// Function to display array elements
void displayArray(int arr[], int n) {
    for (int i = 0; i < n; ++i) {
        cout << arr[i] << " ";
    }
    cout << endl;
}

int main() {
    const int SIZE = 10000;
    int arr[SIZE];

    // Generate random array
    generateRandomArray(arr, SIZE);

    // Sequential bubble sort
    clock_t startTime = clock();
    sequentialBubbleSort(arr, SIZE);
    clock_t endTime = clock();
    cout << "Sequential Bubble Sort Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;

    // Generate random array again for parallel sorting
    generateRandomArray(arr, SIZE);

    // Parallel bubble sort
    startTime = clock();
    parallelBubbleSort(arr, SIZE);
    endTime = clock();
    cout << "Parallel Bubble Sort Time: " << double(endTime - startTime) / CLOCKS_PER_SEC << " seconds" << endl;

    return 0;
}
