#include<iostream>
#include<stdlib.h>
#include<omp.h>
using namespace std;


void mergesort(int a[],int i,int j);
void merge(int a[],int sil,int eil,int sir,int eir);

void mergesort(int a[],int i,int j)
{
	int mid;
	if(i<j)
	{
    	mid=(i+j)/2;

    	#pragma omp parallel sections
    	{

        	#pragma omp section
        	{
            	mergesort(a,i,mid);
        	}

        	#pragma omp section
        	{
            	mergesort(a,mid+1,j);
        	}
    	}

    	merge(a,i,mid,mid+1,j);
	}

}

void merge(int a[],int sil,int eil,int sir,int eir)
{
	int temp[1000];
	int i,j,k;
	i=sil;
	j=sir;
	k=0;

	while(i<=eil && j<=eir)
	{
    	if(a[i]<a[j])
    	{
        	temp[k++]=a[i++];
    	}
    	else
    	{
        	temp[k++]=a[j++];
    }
	}

	while(i<=eil)
	{
    	temp[k++]=a[i++];
	}

	while(j<=eir)
	{
    	temp[k++]=a[j++];
	}

	for(i=sil,j=0;i<=eir;i++,j++)
	{
    	a[i]=temp[j];
	}
}


int main()
{
	int *a,n,i;
	cout<<"\n enter total no of elements=>";
	cin>>n;
	a= new int[n];

	cout<<"\n enter elements=>";
	for(i=0;i<n;i++)
	{
    	cin>>a[i];
	}
   //	 start=.......
//#pragma omp ..
	mergesort(a, 0, n-1);
//          stop  .
	cout<<"\n sorted array is=>";
	for(i=0;i<n;i++)
	{
    	cout<<"\n"<<a[i];
	}
  	// Cout<<Stop-Start
	return 0;
}

